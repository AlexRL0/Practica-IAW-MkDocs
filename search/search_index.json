{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/","title":"Practica-IAW-1.1- Instalaci\u00f3n de Apache HTTP Server, PHP y MySQL Server en Ubuntu Server","text":""},{"location":"Pr%C3%A1ctica1.1/#pasos-previos-a-la-instalacion","title":"Pasos previos a la instalaci\u00f3n","text":"<p>para la instalaci\u00f3n vamos a tener que crear la siguiente estructura de directorios y archivos:</p> <p></p> <p>Una vez creados los archivos y directorios, procedemos a la instalaci\u00f3n de las herramientas.</p>"},{"location":"Pr%C3%A1ctica1.1/#instalacion-de-apache-http-server-php-y-mysql-server-en-ubuntu-server","title":"Instalaci\u00f3n de Apache HTTP Server, PHP y MySQL Server en Ubuntu Server","text":""},{"location":"Pr%C3%A1ctica1.1/#1-creacion-del-archivo-install_lampsh-para-la-automatizacion-del-proceso-de-instalacion","title":"1. Creaci\u00f3n del archivo <code>install_lamp.sh</code> para la automatizaci\u00f3n del proceso de instalaci\u00f3n","text":""},{"location":"Pr%C3%A1ctica1.1/#actualizamos-el-sistema-y-mostramos-los-comandos-que-se-van-ejecutando","title":"Actualizamos el sistema y mostramos los comandos que se van ejecutando.","text":"<pre><code>sudo apt update\nsudo apt upgrade -y\n</code></pre> <pre><code>set -ex\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#11-instalacion-del-servidor-web-apache","title":"1.1 Instalaci\u00f3n del Servidor web Apache","text":""},{"location":"Pr%C3%A1ctica1.1/#paso-1-instalamos-el-servidor-web-apache","title":"Paso 1: Instalamos el servidor web Apache","text":"<pre><code>apt install apache2 -y\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-2-habilitamos-el-modulo-rewrite","title":"Paso 2: Habilitamos el m\u00f3dulo rewrite","text":"<pre><code>a2enmod rewrite\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-3-copiamos-el-archivo-de-configuracion-de-apache","title":"Paso 3: Copiamos el archivo de configuracion de apache","text":"<pre><code>cp ../conf/000-default.conf /etc/apache2/sites-available\n</code></pre> <p>[!IMPORTANT] Tenemos que hacer un archivo de configuraci\u00f3n llamado <code>000-default.conf</code> y copiarlo en los sitios disponibles de apache para que lo podamos habilitar. El archivo <code>000-default.conf</code> tiene que quedar como en la imagen:  </p>"},{"location":"Pr%C3%A1ctica1.1/#paso-4-instalamos-php-y-algunos-modulos-para-apache-y-mysql","title":"Paso 4: Instalamos PHP y algunos m\u00f3dulos para Apache y MySQL","text":"<pre><code>apt install php libapache2-mod-php php-mysql -y\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-5-reiniciamos-el-servicio-de-apache-para-aplicar-los-cambios","title":"Paso 5: Reiniciamos el servicio de apache para aplicar los cambios","text":"<pre><code>systemctl restart apache2\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#12-instalacion-de-mysql-server","title":"1.2 Instalaci\u00f3n de MySQL Server","text":""},{"location":"Pr%C3%A1ctica1.1/#paso-1-instalamos-mysql-server","title":"Paso 1: Instalamos MYSQL server","text":"<pre><code>apt install mysql-server -y\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-2-copiamos-el-archivo-de-prueba-de-php-en-varwwwhtml","title":"Paso 2: Copiamos el archivo de prueba de PHP en /var/www/html","text":"<pre><code>cp ../php/index.php /var/www/html\n</code></pre> <p>[!NOTE] Para esto, hace falta un archivo <code>index.php</code> y que contenga el siguiente contenido: \"&lt;?php</p> <p>phpinfo();</p> <p>?&gt;\"</p> <p>[!IMPORTANT] Esto se hace debido a que en el archivo de configuraci\u00f3n <code>000-default.conf</code> pusimos una l\u00ednea que hace que priorice los archivos php frente a los html. Esa l\u00ednea es: <code>DirectoryIndex index.php index.html</code></p>"},{"location":"Pr%C3%A1ctica1.1/#paso-3-modificamos-el-propietario-y-el-grupo-del-archivo-indexphp","title":"Paso 3: Modificamos el propietario y el grupo del archivo index.php","text":"<pre><code>chown -R www-data:www-data /var/www/html\n</code></pre> <p>:warning:Lo modificamos ya que el grupo www-data pertenece al usuario con el que se ejecuta el servicio Apache y necesita permisos para ver, leer y escribir dentro de ese directorio.</p>"},{"location":"Pr%C3%A1ctica1.1/#paso-4-comprobacion-de-que-la-pagina-indexphp-funciona","title":"Paso 4: comprobaci\u00f3n de que la p\u00e1gina <code>index.php</code> funciona","text":""},{"location":"Pr%C3%A1ctica1.1/#paso-5-comprobacion-de-que-el-servicio-mysqlserver-funciona","title":"Paso 5: comprobaci\u00f3n de que el servicio <code>MySQLServer</code> funciona","text":""},{"location":"Pr%C3%A1ctica1.1/#2-creacion-del-archivo-install_toolssh-para-la-automatizacion-del-proceso-de-instalacion","title":"2. Creaci\u00f3n del archivo <code>install_tools.sh</code> para la automatizaci\u00f3n del proceso de instalaci\u00f3n","text":""},{"location":"Pr%C3%A1ctica1.1/#importamos-el-archivo-de-variables","title":"Importamos el archivo de variables","text":"<pre><code>source .env\n</code></pre> <p>[!NOTE] Este archivo de configuraci\u00f3n se hace para que lo que vamos a hacer mas adelante reconozca las variables configuradas en ese archivo. Todas las variables que aparezcan en este documento, est\u00e1n dentro del archivo <code>.env</code></p> <p>[!WARNING] Otra cosa a tener en cuenta es que este archivo es publico en el repositorio y pues toda la gente que vea el repositorio puede ver las contrase\u00f1as y usuarios que tiene el archivo, asi que para evitar eso, hacemos un archivo <code>.gitignore</code> y dentro de \u00e9l ponemos <code>.env</code> para que ignore ese archivo para que a la hora de subirlo est\u00e9 oculto al p\u00fablico. Lo que podemos hacer para que la gente sepa que variables se configuran podemos hacer un <code>.env.example</code> y dentro poner las variables vac\u00edas para que sepan que se tienen que configurar con un .env.</p>"},{"location":"Pr%C3%A1ctica1.1/#actualizamos-el-sistema-y-mostramos-los-comandos-que-se-van-ejecutando_1","title":"Actualizamos el sistema y mostramos los comandos que se van ejecutando","text":"<pre><code>sudo apt update\nsudo apt upgrade -y\n</code></pre> <pre><code>set -ex\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#21-configuramos-las-respuestas-para-la-instalacion-de-phpmyadmin","title":"2.1 Configuramos las respuestas para la instalaci\u00f3n de phpmyadmin","text":"<pre><code>echo \"phpmyadmin phpmyadmin/reconfigure-webserver multiselect apache2\" | debconf-set-selections\n\necho \"phpmyadmin phpmyadmin/dbconfig-install boolean true\" | debconf-set-selections\n\necho \"phpmyadmin phpmyadmin/mysql/app-pass password $PHPMYADMIN_APP_PASSWORD\" | debconf-set-selections\n\necho \"phpmyadmin phpmyadmin/app-password-confirm password $PHPMYADMIN_APP_PASSWORD\" | debconf-set-selections\n</code></pre> <p>Esto se hace para que a la hora de instalar el phpmyadmin automatice todos esos procesos que se tendrian que hacer a mano como la creaci\u00f3n de un usuario.</p>"},{"location":"Pr%C3%A1ctica1.1/#22-instalacion-de-phpmyadmin","title":"2.2 Instalacion de phpMyAdmin","text":""},{"location":"Pr%C3%A1ctica1.1/#paso-1-instalamos-phpmyadmin","title":"Paso 1: Instalamos phpMyAdmin","text":"<pre><code>apt install phpmyadmin php-mbstring php-zip php-gd php-json php-curl -y\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-2-creamos-una-base-de-datos-de-ejemplo","title":"Paso 2: Creamos una base de datos de ejemplo","text":"<pre><code>mysql -u root &lt;&lt;&lt; \"DROP DATABASE IF EXISTS $DB_NAME\"\nmysql -u root &lt;&lt;&lt; \"CREATE DATABASE $DB_NAME\"\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-3-creamos-un-usuario-para-la-base-de-datos-de-ejemplo","title":"Paso 3: Creamos un usuario para la base de datos de ejemplo","text":"<pre><code>mysql -u root &lt;&lt;&lt; \"DROP USER IF EXISTS '$DB_USER'@'%'\"\nmysql -u root &lt;&lt;&lt; \"CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASSWORD'\"\nmysql -u root &lt;&lt;&lt; \"GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'%'\"\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-4-comprobacion-de-que-la-pagina-phpmyadmin-funciona","title":"Paso 4: comprobaci\u00f3n de que la p\u00e1gina <code>phpMyAdmin</code> funciona","text":""},{"location":"Pr%C3%A1ctica1.1/#23-instalacion-de-adminer","title":"2.3 Instalacion de Adminer","text":""},{"location":"Pr%C3%A1ctica1.1/#paso-1-creamos-un-directorio-para-adminer","title":"Paso 1: Creamos un directorio para adminer","text":"<pre><code>mkdir -p /var/www/html/adminer\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-2-instalamos-adminer","title":"Paso 2: Instalamos Adminer","text":"<pre><code>wget https://github.com/vrana/adminer/releases/download/v4.8.1/adminer-4.8.1-mysql.php -P /var/www/html/adminer\n</code></pre> <p>Con el comando <code>wget</code> nos descargamos el archivo de adminer y con el par\u00e1metro <code>-p</code> le indicamos la ruta donde lo queremos guardar.</p>"},{"location":"Pr%C3%A1ctica1.1/#paso-3-renombramos-el-nombre-del-script-de-adminer","title":"Paso 3: Renombramos el nombre del script de Adminer","text":"<pre><code>mv /var/www/html/adminer/adminer-4.8.1-mysql.php /var/www/html/adminer/index.php\n</code></pre> <p>[!TIP] Renombramos el directorio ya que el nombre que tiene es muy largo y lo cambiamos a uno mas com\u00fan con el archivo del <code>index.php</code> para que el servidor apache lo pueda reconocer m\u00e1s f\u00e1cil.</p>"},{"location":"Pr%C3%A1ctica1.1/#paso-4-modificamos-el-propietario-y-el-grupo-del-archivo","title":"Paso 4. Modificamos el propietario y el grupo del archivo","text":"<pre><code>chown -R www-data:www-data /var/www/html/adminer\n</code></pre> <p>Una vez m\u00e1s tenemos que darle permisos al grupo y usuario de apache para que pueda leer el archivo.</p>"},{"location":"Pr%C3%A1ctica1.1/#paso-5-comprobacion-de-que-la-pagina-adminer-funciona","title":"Paso 5: comprobaci\u00f3n de que la p\u00e1gina <code>adminer</code> funciona","text":""},{"location":"Pr%C3%A1ctica1.1/#24-instalacion-de-la-herramienta-goacces","title":"2.4 Instalacion de la herramienta GoAcces","text":""},{"location":"Pr%C3%A1ctica1.1/#paso-1-instalamos-la-herramienta-goaccess","title":"Paso 1. Instalamos la herramienta goaccess","text":"<pre><code>apt update\napt install goaccess -y\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-2-creamos-un-directorio-para-los-informes-estadisticos","title":"Paso 2. Creamos un directorio para los informes estadisticos","text":"<pre><code>mkdir -p /var/www/html/stats\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-3-ejecutamos-goaccess-en-background","title":"Paso 3. Ejecutamos GoAccess en background","text":"<pre><code>goaccess /var/log/apache2/access.log -o /var/www/html/stats/index.html --log-format=COMBINED --real-time-html --daemonize\n</code></pre> <p>Esto lo hacemos para generar los informes en segundo plano. Para ejecutarlo en segundo plano podemos utilizar el par\u00e1metro <code>--daemonize</code></p>"},{"location":"Pr%C3%A1ctica1.1/#3-control-de-acceso-a-un-directorio-con-autenticacion-basica","title":"3. Control de acceso a un directorio con autenticaci\u00f3n b\u00e1sica","text":""},{"location":"Pr%C3%A1ctica1.1/#paso-1-copiamos-el-archivo-de-configuracion-de-stats","title":"Paso 1: Copiamos el archivo de configuracion de <code>stats</code>","text":"<pre><code>cp ../conf/000-default.stats.conf /etc/apache2/sites-available\n</code></pre> <p>[!IMPORTANT] Tenemos que hacer otro archivo de configuraci\u00f3n llamado <code>000-default.stats.conf</code> y copiarlo en los sitios disponibles de apache para que lo podamos habilitar m\u00e1s tarde. El archivo <code>000-default.stats.conf</code> tiene que quedar como en la imagen: </p>"},{"location":"Pr%C3%A1ctica1.1/#paso-2-deshabilitamos-el-virtualhost-que-hay-por-defecto","title":"Paso 2: Deshabilitamos el virtualhost que hay por defecto","text":"<pre><code>a2dissite 000-default.conf\n</code></pre> <p>Esto lo hacemos para poder habilitar el otro archivo que hemos copiado, es decir, el <code>000-default.stats.conf</code>.</p>"},{"location":"Pr%C3%A1ctica1.1/#paso-3-habilitamos-el-nuevo-virtualhost","title":"Paso 3: Habilitamos el nuevo virtualhost","text":"<pre><code>a2ensite 000-default.stats.conf\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-4-hacemos-un-reload-al-servicio-apache","title":"Paso 4: Hacemos un reload al servicio apache","text":"<pre><code>systemctl reload apache2\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-5-creamos-el-archivo-de-contrasenas","title":"Paso 5: Creamos el archivo de contrase\u00f1as","text":"<pre><code>htpasswd -bc /etc/apache2/.htpasswd $STATS_USERNAME $STATS_PASSWORD\n</code></pre> <p>Esto se hace para que sea m\u00e1s seguro y pida un usuario y contrase\u00f1a a la hora de entrar a la p\u00e1gina web</p>"},{"location":"Pr%C3%A1ctica1.1/#4-control-de-acceso-a-un-directorio-con-htaccess","title":"4. Control de acceso a un directorio con <code>.htaccess</code>","text":""},{"location":"Pr%C3%A1ctica1.1/#paso-1-copiamos-el-archivo-de-configuracion-de-htaccess","title":"Paso 1: Copiamos el archivo de configuracion de <code>.htaccess</code>","text":"<pre><code>cp ../conf/000-default-htaccess.conf /etc/apache2/sites-available\n</code></pre> <p>[!IMPORTANT] Tenemos que hacer otro archivo de configuraci\u00f3n llamado <code>000-default-htaccess.conf</code> y copiarlo en los sitios disponibles de apache para que lo podamos habilitar m\u00e1s tarde. El archivo <code>000-default-htaccess.conf</code> tiene que quedar como en la imagen: </p>"},{"location":"Pr%C3%A1ctica1.1/#paso-2-deshabilitamos-el-virtualhost-000-default-statsconf","title":"Paso 2: Deshabilitamos el virtualhost <code>000-default-stats.conf</code>","text":"<pre><code>a2dissite 000-default.stats.conf\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-3-habilitamos-el-nuevo-virtualhost-000-default-htaccessconf","title":"Paso 3: Habilitamos el nuevo virtualhost <code>000-default-htaccess.conf</code>","text":"<pre><code>a2ensite 000-default-htaccess.conf\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-4-hacemos-un-reload-al-servicio-de-apache","title":"Paso 4: Hacemos un reload al servicio de apache","text":"<pre><code>systemctl reload apache2\n</code></pre>"},{"location":"Pr%C3%A1ctica1.1/#paso-5-copiamos-el-archivo-htaccess-a-varwwwhtmlstats","title":"Paso 5: Copiamos el archivo <code>.htaccess</code> a <code>/var/www/html/stats</code>","text":"<pre><code>cp ../conf/.htaccess /var/www/html/stats\n</code></pre> <p>[!IMPORTANT] Tenemos que hacer un archivo de configuraci\u00f3n llamado <code>.htaccess</code> y copiarlo en la ruta de <code>stats</code> para que coja la configuraci\u00f3n del archivo y al entrar a la web nos pida las credenciales necesarias. El archivo <code>.htaccess</code> tiene que quedar como en la imagen: </p>"},{"location":"Pr%C3%A1ctica1.1/#paso-6-comprobacion-de-que-la-autenticacion-funciona","title":"Paso 6: comprobaci\u00f3n de que la autenticaci\u00f3n funciona","text":""},{"location":"Pr%C3%A1ctica1.1/#paso-7-comprobacion-de-que-la-pagina-funciona","title":"Paso 7: comprobaci\u00f3n de que la p\u00e1gina funciona","text":""},{"location":"Pr%C3%A1ctica1.11/","title":"Practica-IAW-1.11- Implantaci\u00f3n de Wordpress en AWS utilizando una arquitectura de tres niveles","text":""},{"location":"Pr%C3%A1ctica1.11/#pasos-previos-a-la-instalacion","title":"Pasos previos a la instalaci\u00f3n","text":"<p>para la instalaci\u00f3n vamos a tener que crear la siguiente estructura de directorios y archivos:</p> <p></p> <p>Una vez creados los archivos y directorios, procedemos a la implantaci\u00f3n de Wordpress en AWS utilizando una arquitectura de tres niveles.</p>"},{"location":"Pr%C3%A1ctica1.11/#implantacion-de-wordpress-en-aws-utilizando-una-arquitectura-de-tres-niveles","title":"Implantaci\u00f3n de Wordpress en AWS utilizando una arquitectura de tres niveles","text":""},{"location":"Pr%C3%A1ctica1.11/#1-creamos-un-nombre-de-dominio-para-nuestro-servidor-con-la-web-no-ip","title":"1. Creamos un nombre de dominio para nuestro servidor con la web <code>no-ip</code>","text":""},{"location":"Pr%C3%A1ctica1.11/#paso-1-crear-el-nombre-del-dominio","title":"Paso 1. Crear el nombre del dominio","text":"<p>Para crear el nombre de dominio en la p\u00e1gina, tenemos que registrarnos y dirigirnos al sitio que muestra la captura y darle a crear nombre de host.</p> <p></p> <p>Una vez dado al recuadro de crear el nombre, nos sale un asistente para poner el nombre de host que queramos, el dominio que queremos que lleve, la direcci\u00f3n ip de la m\u00e1quina o pc que queremos que tenga ese nombre de host y el tipo de registro que queremos que lleve, en nuestro caso es el DNS Host A</p> <p></p> <p>Hecho esto ya podemos automatizar el proceso de la implantaci\u00f3n de Wordpress en AWS utilizando una arquitectura de tres niveles</p>"},{"location":"Pr%C3%A1ctica1.11/#11-infraestructura-necesaria","title":"1.1 Infraestructura necesaria","text":"<p>La infraestructura necesaria est\u00e1 compuesta de cuatro m\u00e1quinas virtuales, una para el balanceador de carga (Load Balancer), dos como frontales web (Front-End) y una como servidor de base de datos MySQL (Back-End).</p> <ul> <li>Servidor NFS (Esta pr\u00e1ctica, Pr\u00e1ctica-IAW-1.11-NFS_server)</li> <li>Balanceador. (Pr\u00e1ctica-IAW-1.10-LoadBalancer).</li> <li>Frontal Web 1/Cliente NFS. (Pr\u00e1ctica-IAW-1.9-Frontend).</li> <li>Frontal Web 2/Cliente NFS. (Pr\u00e1ctica-IAW-1.10-frontend2).</li> <li>Servidor de Base de Datos MySQL. (Pr\u00e1ctica-IAW-1.9-Backend).</li> </ul>"},{"location":"Pr%C3%A1ctica1.11/#2-creacion-del-archivo-setup_nfs_server-para-el-servidor-nfs","title":"2. Creaci\u00f3n del archivo <code>setup_nfs_server</code> para el servidor NFS","text":""},{"location":"Pr%C3%A1ctica1.11/#paso-1-importamos-el-archivo-de-variables-y-mostramos-los-comandos-que-se-van-ejecutando","title":"Paso 1. Importamos el archivo de variables y mostramos los comandos que se van ejecutando","text":"<pre><code>source .env\n</code></pre> <pre><code>set -ex\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#paso-2-actualizamos-los-repositorios","title":"Paso 2. Actualizamos los repositorios","text":"<pre><code>apt update\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#paso-3-actualizamos-los-paquetes","title":"Paso 3. Actualizamos los paquetes","text":"<pre><code>apt upgrade -y\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#paso-4-instalamos-el-servidor-nfs","title":"Paso 4. Instalamos el servidor NFS","text":"<pre><code>apt install nfs-kernel-server -y\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#paso-5-hacemos-el-directorio","title":"Paso 5. hacemos el directorio","text":"<pre><code>mkdir -p /var/www/html\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#paso-6-modificamos-el-grupo-y-el-propietario-del-directorio","title":"Paso 6. Modificamos el grupo y el propietario del directorio","text":"<pre><code>chown nobody:nogroup /var/www/html\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#paso-7-copiamos-la-plantilla-exports-a-etcexports","title":"Paso 7. copiamos la plantilla exports a /etc/exports","text":"<pre><code>cp ../conf/load_balancer.conf /etc/nginx/sites-available\n</code></pre> <p>[!IMPORTANT] El archivo <code>exports</code> lo tenemos que hacer nosotros en la carpeta <code>conf</code> y moverlo al directorio de sitios disponibles de nginx para que lo vea y lo habilite para su funcionamiento. A continuaci\u00f3n, pongo el contenido del fichero <code>exports</code>: <code>bash /var/www/html FRONTEND_NETWORK(rw,sync,no_root_squash,no_subtree_check)</code></p>"},{"location":"Pr%C3%A1ctica1.11/#paso-8-reemplazamos-el-valor-de-la-plantilla-de-etcexports","title":"Paso 8. Reemplazamos el valor de la plantilla de /etc/exports","text":"<pre><code>sed -i \"s#FRONTEND_NETWORK#$FRONTEND_NETWORK#\" /etc/exports\n</code></pre> <p>[!IMPORTANT] Las variables que ir\u00e1n apareciendo durante los pasos est\u00e1n todas definidas en el archivo <code>.env</code> y en <code>.env.example</code> se pueden ver las variables que hay que tener definidas.</p>"},{"location":"Pr%C3%A1ctica1.11/#paso-9-reiniciamos-el-servicio-de-nfs","title":"Paso 9. Reiniciamos el servicio de NFS","text":"<pre><code>systemctl restart nfs-kernel-server\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#3-creacion-del-archivo-setup_nfs_client-para-los-clientes-nfs","title":"3. Creaci\u00f3n del archivo <code>setup_nfs_client</code> para los clientes NFS","text":""},{"location":"Pr%C3%A1ctica1.11/#paso-1-importamos-el-archivo-de-variables-y-mostramos-los-comandos-que-se-van-ejecutando_1","title":"Paso 1. Importamos el archivo de variables y mostramos los comandos que se van ejecutando","text":"<pre><code>source .env\n</code></pre> <pre><code>set -ex\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#paso-2-actualizamos-los-repositorios_1","title":"Paso 2. Actualizamos los repositorios","text":"<pre><code>apt update\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#paso-3-actualizamos-los-paquetes_1","title":"Paso 3. Actualizamos los paquetes","text":"<pre><code>apt upgrade -y\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#paso-4-instalamos-el-cliente-nfs","title":"Paso 4. Instalamos el cliente NFS","text":"<pre><code>apt install nfs-common -y\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#paso-5-montamos-el-directorio","title":"Paso 5. Montamos el directorio","text":"<pre><code>mount $NFS_SERVER_IP:/var/www/html /var/www/html\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#paso-6-cambiamos-la-variable-de-etcfstab","title":"Paso 6. Cambiamos la variable de /etc/fstab","text":"<pre><code>sed -i '$a\\172.31.28.95:/var/www/html /var/www/html  nfs auto,nofail,noatime,nolock,intr,tcp,actimeo=1800 0 0' /etc/fstab\n</code></pre>"},{"location":"Pr%C3%A1ctica1.11/#comprobacion-de-que-wordpress-en-la-arquitectura-de-tres-niveles-funciona","title":"Comprobaci\u00f3n de que WordPress en la arquitectura de tres niveles funciona","text":"<p>Sale el nombre de la Pr\u00e1ctica 1.9 porque no le he cambiado el nombre a la p\u00e1gina.</p>"},{"location":"Pr%C3%A1ctica5.4/","title":"Practica-IAW-5.4- \u00abDockerizar\u00bb una web est\u00e1tica y publicarla en Docker Hub.","text":""},{"location":"Pr%C3%A1ctica5.4/#1-comando-usado-para-montar-la-imagen-del-dockerfile-y-comprobar-que-la-imagen-esta-montada-correctamente","title":"1. Comando usado para montar la imagen del dockerfile y comprobar que la imagen esta montada correctamente","text":"<pre><code>docker build -t alexrl0/2048 .\ndocker images\n</code></pre>"},{"location":"Pr%C3%A1ctica5.4/#2-comando-usado-para-crear-un-tag-a-la-imagen-ya-montada","title":"2. Comando usado para crear un tag a la imagen ya montada","text":"<pre><code>docker tag alexrl0/2048 alexrl0/2048:1.0\n</code></pre>"},{"location":"Pr%C3%A1ctica5.4/#3-comando-para-iniciar-sesion-en-dockerhub","title":"3. Comando para iniciar sesi\u00f3n en dockerhub","text":"<pre><code>docker login -u alexrl0\n</code></pre> <p>[!IMPORTANT] Al iniciar sesi\u00f3n con este comando, nos pedir\u00e1 una contrase\u00f1a, en vez de poner una contrase\u00f1a, tenemos que crear un token en dockerhub con permisos de lectura, escritura y ejecuci\u00f3n y pegarlo para poder iniciar sesi\u00f3n.</p> <p>vamos por pasos, lo primero es inicar sesi\u00f3n en dockerhub con la cuenta de github, una vez iniciada la sesi\u00f3n, le damos click a nuestro perfil y se nos desplegar\u00e1 una ventana flotante como aparece en la imagen se\u00f1alado con una flecha, cuando estemos en esa ventana, le damos a <code>Accounts settings</code> y nos aparecer\u00e1 lo que sale en la imagen. Una vez dentro, le damos a <code>Personal access tokens</code> y dentro, le damos a <code>create new token</code>.</p> <p></p> <p>Cuando le damos a crear el nuevo token, nos aparecer\u00e1 una ventana como la que se ve en la imagen, nos pedir\u00e1 un nombre para el token, una fecha de caducidad que en mi caso no le he puesto y lo \u00faltimo pero lo m\u00e1s importante los permisos de la misma, tenemos que ponerle de lectura, escritura y ejecuci\u00f3n porque si no, docker no va a poder subir la imagen a dockerhub.</p> <p></p>"},{"location":"Pr%C3%A1ctica5.4/#4-archivo-dockerfile-que-se-va-a-ejecutar","title":"4. Archivo dockerfile que se va a ejecutar","text":"<pre><code>FROM ubuntu:24.04\n\nRUN apt update &amp;&amp; \\\n  apt install nginx -y &amp;&amp; \\\n  apt install git -y &amp;&amp; \\\n  rm -rf /var/lib/apt/lists/*\n\nRUN git clone https://github.com/josejuansanchez/2048.git /app &amp;&amp; \\\n    mv /app/* /var/www/html/\n\nEXPOSE 80\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre>"},{"location":"Pr%C3%A1ctica5.4/#5-archivo-action-de-github-que-automatiza-todo-el-proceso","title":"5. Archivo action de github que automatiza todo el proceso","text":"<pre><code>name: Publish image to Docker Hub\n\n# This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n# separate terms of service, privacy policy, and support\n# documentation.\n\non:\n  push:\n    branches: [ \"main\" ]\n    # Publish semver tags as releases.\n    tags: [ 'v*.*.*' ]\n  workflow_dispatch:\n\nenv:\n  # Use docker.io for Docker Hub if empty\n  REGISTRY: docker.io\n  # github.repository as &lt;account&gt;/&lt;repo&gt;\n  #IMAGE_NAME: ${{ github.repository }}\n  IMAGE_NAME: 2048\n  IMAGE_TAG: latest\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Set up BuildKit Docker container builder to be able to build\n      # multi-platform images and export cache\n      # https://github.com/docker/setup-buildx-action\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0\n\n      # Login against a Docker registry except on PR\n      # https://github.com/docker/login-action\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      # This action can be used to check the content of the variables\n      - name: Debug\n        run: |\n          echo \"github.repository: ${{ github.repository }}\"\n          echo \"env.REGISTRY: ${{ env.REGISTRY }}\"\n          echo \"github.sha: ${{ github.sha }}\"\n          echo \"env.IMAGE_NAME: ${{ env.IMAGE_NAME }}\"\n\n      # Build and push Docker image with Buildx (don't push on PR)\n      # https://github.com/docker/build-push-action\n      - name: Build and push Docker image\n        id: build-and-push\n        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0\n        with:\n          context: .\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max          \n</code></pre> <p>Este archivo de trabajo de GitHub Actions construye y publica una imagen Docker en DockerHub.</p> <pre><code>name: Publish image to Docker Hub\n</code></pre>"},{"location":"Pr%C3%A1ctica5.4/#eventos-de-activacion","title":"Eventos de Activaci\u00f3n","text":"<p>El flujo de trabajo se activa con los siguientes eventos:</p> <pre><code>on:\n  push:\n    branches: [ \"main\" ]\n  tags: [ 'v*.*.*' ]\n  workflow_dispatch:\n</code></pre>"},{"location":"Pr%C3%A1ctica5.4/#variables-de-entorno","title":"Variables de Entorno","text":"<p>Estas son las variables de entorno utilizadas en el flujo de trabajo:</p> <pre><code>env:\n  REGISTRY: docker.io\n  IMAGE_NAME: 2048\n  IMAGE_TAG: latest\n</code></pre>"},{"location":"Pr%C3%A1ctica5.4/#jobs-y-pasos","title":"Jobs y Pasos","text":""},{"location":"Pr%C3%A1ctica5.4/#build-job","title":"Build Job","text":"<p>El trabajo <code>build</code> se ejecuta en un sistema <code>ubuntu-latest</code> con los siguientes pasos:</p> <ol> <li> <p>Checkout del Repositorio</p> <p><code>yaml - name: Checkout repository   uses: actions/checkout@v3</code></p> </li> <li> <p>Configurar Docker Buildx</p> <p><code>yaml - name: Set up Docker Buildx   uses: docker/setup-buildx-action@v3.0.0</code></p> </li> <li> <p>Inicio de Sesi\u00f3n en el Registro Docker</p> <p><code>yaml - name: Log into registry ${{ env.REGISTRY }}   uses: docker/login-action@v3.0.0   with:     registry: ${{ env.REGISTRY }}     username: ${{ secrets.DOCKERHUB_USERNAME }}     password: ${{ secrets.DOCKERHUB_TOKEN }}</code> Es necesario crear dos secrets en el repositorio de GitHub con los mismos nombres que aparecen en el archivo .yml: <code>DOCKERHUB_USERNAME</code> y <code>DOCKERHUB_TOKEN</code>, indic\u00e1ndole para el del usuario el de DockerHub y para el token, el token que creamos anteriormente en DockerHub. </p> </li> <li> <p>Paso de Depuraci\u00f3n</p> <p><code>yaml - name: Debug   run: |     echo \"github.repository: ${{ github.repository }}\"     echo \"env.REGISTRY: ${{ env.REGISTRY }}\"     echo \"github.sha: ${{ github.sha }}\"     echo \"env.IMAGE_NAME: ${{ env.IMAGE_NAME }}\"</code></p> </li> <li> <p>Construir y Publicar la Imagen Docker</p> <p><code>yaml - name: Build and push Docker image   id: build-and-push   uses: docker/build-push-action@v5.0.0   with:     context: .     push: ${{ github.event_name != 'pull_request' }}     tags: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}     cache-from: type=gha     cache-to: type=gha,mode=max</code></p> </li> </ol>"},{"location":"Pr%C3%A1ctica5.4/#5-comprobacion-de-que-se-hace-y-se-publica-en-dockerhub","title":"5. Comprobaci\u00f3n de que se hace y se publica en DockerHub","text":""},{"location":"about/","title":"Acerca de","text":"<p>Hola bla bla</p>"}]}